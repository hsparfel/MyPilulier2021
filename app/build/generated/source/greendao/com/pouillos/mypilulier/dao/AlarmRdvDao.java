package com.pouillos.mypilulier.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.pouillos.mypilulier.entities.AlarmRdv;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ALARM_RDV".
*/
public class AlarmRdvDao extends AbstractDao<AlarmRdv, Long> {

    public static final String TABLENAME = "ALARM_RDV";

    /**
     * Properties of entity AlarmRdv.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Classe = new Property(1, String.class, "classe", false, "CLASSE");
        public final static Property Date = new Property(2, java.util.Date.class, "date", false, "DATE");
        public final static Property DateString = new Property(3, String.class, "dateString", false, "DATE_STRING");
        public final static Property Detail = new Property(4, String.class, "detail", false, "DETAIL");
        public final static Property Echeance = new Property(5, String.class, "echeance", false, "ECHEANCE");
        public final static Property RequestCode = new Property(6, int.class, "requestCode", false, "REQUEST_CODE");
    }


    public AlarmRdvDao(DaoConfig config) {
        super(config);
    }
    
    public AlarmRdvDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ALARM_RDV\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CLASSE\" TEXT," + // 1: classe
                "\"DATE\" INTEGER," + // 2: date
                "\"DATE_STRING\" TEXT," + // 3: dateString
                "\"DETAIL\" TEXT," + // 4: detail
                "\"ECHEANCE\" TEXT," + // 5: echeance
                "\"REQUEST_CODE\" INTEGER NOT NULL );"); // 6: requestCode
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ALARM_RDV\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AlarmRdv entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String classe = entity.getClasse();
        if (classe != null) {
            stmt.bindString(2, classe);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(3, date.getTime());
        }
 
        String dateString = entity.getDateString();
        if (dateString != null) {
            stmt.bindString(4, dateString);
        }
 
        String detail = entity.getDetail();
        if (detail != null) {
            stmt.bindString(5, detail);
        }
 
        String echeance = entity.getEcheance();
        if (echeance != null) {
            stmt.bindString(6, echeance);
        }
        stmt.bindLong(7, entity.getRequestCode());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AlarmRdv entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String classe = entity.getClasse();
        if (classe != null) {
            stmt.bindString(2, classe);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(3, date.getTime());
        }
 
        String dateString = entity.getDateString();
        if (dateString != null) {
            stmt.bindString(4, dateString);
        }
 
        String detail = entity.getDetail();
        if (detail != null) {
            stmt.bindString(5, detail);
        }
 
        String echeance = entity.getEcheance();
        if (echeance != null) {
            stmt.bindString(6, echeance);
        }
        stmt.bindLong(7, entity.getRequestCode());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AlarmRdv readEntity(Cursor cursor, int offset) {
        AlarmRdv entity = new AlarmRdv( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // classe
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // date
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // dateString
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // detail
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // echeance
            cursor.getInt(offset + 6) // requestCode
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AlarmRdv entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setClasse(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDate(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setDateString(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDetail(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEcheance(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRequestCode(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AlarmRdv entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AlarmRdv entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AlarmRdv entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
